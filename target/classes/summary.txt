 * 使用BIO方式(同步阻塞IO)
 * 使用ServerSocket绑定IP地址，启动端口，使用Socket进行握手连接，连接成功后，双方通过输入输出流进行同步阻塞式通信
 * 每当有客户端的请求后，即启动一个线程进行处理
 
 使用PAIO(同步阻塞IO)
 * 使用线程池进行处理客户端的请求
 * 因为在进行read或者write的时候 都是阻塞IO的 所以还是同步阻塞IO  只是线程的资源交由线程池进行控制
 
 使用java.nio包的NIO方式(异步非阻塞IO)
 * 使用NIO方式 异步IO
 * 使用多路复用器关联通道 当通道中有事件时 即通知处理 不用阻塞IO
 
 使用AIO方式(异步非阻塞IO) 
 * 使用AIO方式，异步非阻塞IO
 * 相当于NIO的升级版 编码思路上相比于NIO而言更加的简单明了
 
 * 使用netty框架进行编程
 * 步骤
 * 1、构建事件处理池
 * 2、使用引导程序关联事件处理池、通道、事件处理器
 * 3、绑定端口服务
 * 4、等待操作完成
 * 5、关闭事件处理池